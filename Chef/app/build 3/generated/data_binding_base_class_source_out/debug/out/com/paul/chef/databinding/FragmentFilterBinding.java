// Generated by view binder compiler. Do not edit!
package com.paul.chef.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.Button;
import android.widget.ImageButton;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.constraintlayout.widget.ConstraintLayout;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.google.android.material.chip.Chip;
import com.google.android.material.chip.ChipGroup;
import com.paul.chef.R;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class FragmentFilterBinding implements ViewBinding {
  @NonNull
  private final ConstraintLayout rootView;

  @NonNull
  public final Button filterCancel;

  @NonNull
  public final Button filterCheck;

  @NonNull
  public final Chip filterChefSpaceChip;

  @NonNull
  public final ChipGroup filterChipGroup;

  @NonNull
  public final ImageButton filterDismiss;

  @NonNull
  public final View filterDivider1;

  @NonNull
  public final View filterDivider2;

  @NonNull
  public final TextView filterTitle;

  @NonNull
  public final Chip filterUserSpaceChip;

  private FragmentFilterBinding(@NonNull ConstraintLayout rootView, @NonNull Button filterCancel,
      @NonNull Button filterCheck, @NonNull Chip filterChefSpaceChip,
      @NonNull ChipGroup filterChipGroup, @NonNull ImageButton filterDismiss,
      @NonNull View filterDivider1, @NonNull View filterDivider2, @NonNull TextView filterTitle,
      @NonNull Chip filterUserSpaceChip) {
    this.rootView = rootView;
    this.filterCancel = filterCancel;
    this.filterCheck = filterCheck;
    this.filterChefSpaceChip = filterChefSpaceChip;
    this.filterChipGroup = filterChipGroup;
    this.filterDismiss = filterDismiss;
    this.filterDivider1 = filterDivider1;
    this.filterDivider2 = filterDivider2;
    this.filterTitle = filterTitle;
    this.filterUserSpaceChip = filterUserSpaceChip;
  }

  @Override
  @NonNull
  public ConstraintLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static FragmentFilterBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static FragmentFilterBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.fragment_filter, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static FragmentFilterBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.filter_cancel;
      Button filterCancel = ViewBindings.findChildViewById(rootView, id);
      if (filterCancel == null) {
        break missingId;
      }

      id = R.id.filter_check;
      Button filterCheck = ViewBindings.findChildViewById(rootView, id);
      if (filterCheck == null) {
        break missingId;
      }

      id = R.id.filter_chef_space_chip;
      Chip filterChefSpaceChip = ViewBindings.findChildViewById(rootView, id);
      if (filterChefSpaceChip == null) {
        break missingId;
      }

      id = R.id.filter_chip_group;
      ChipGroup filterChipGroup = ViewBindings.findChildViewById(rootView, id);
      if (filterChipGroup == null) {
        break missingId;
      }

      id = R.id.filter_dismiss;
      ImageButton filterDismiss = ViewBindings.findChildViewById(rootView, id);
      if (filterDismiss == null) {
        break missingId;
      }

      id = R.id.filter_divider_1;
      View filterDivider1 = ViewBindings.findChildViewById(rootView, id);
      if (filterDivider1 == null) {
        break missingId;
      }

      id = R.id.filter_divider_2;
      View filterDivider2 = ViewBindings.findChildViewById(rootView, id);
      if (filterDivider2 == null) {
        break missingId;
      }

      id = R.id.filter_title;
      TextView filterTitle = ViewBindings.findChildViewById(rootView, id);
      if (filterTitle == null) {
        break missingId;
      }

      id = R.id.filter_user_space_chip;
      Chip filterUserSpaceChip = ViewBindings.findChildViewById(rootView, id);
      if (filterUserSpaceChip == null) {
        break missingId;
      }

      return new FragmentFilterBinding((ConstraintLayout) rootView, filterCancel, filterCheck,
          filterChefSpaceChip, filterChipGroup, filterDismiss, filterDivider1, filterDivider2,
          filterTitle, filterUserSpaceChip);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
