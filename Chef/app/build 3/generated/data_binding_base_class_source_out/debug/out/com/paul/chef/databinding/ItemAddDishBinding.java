// Generated by view binder compiler. Do not edit!
package com.paul.chef.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.Button;
import android.widget.LinearLayout;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.constraintlayout.widget.ConstraintLayout;
import androidx.core.widget.NestedScrollView;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.google.android.material.card.MaterialCardView;
import com.google.android.material.textfield.TextInputLayout;
import com.paul.chef.R;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class ItemAddDishBinding implements ViewBinding {
  @NonNull
  private final ConstraintLayout rootView;

  @NonNull
  public final Button addDish;

  @NonNull
  public final MaterialCardView cardView3;

  @NonNull
  public final LinearLayout dishLinear;

  @NonNull
  public final TextView introText;

  @NonNull
  public final TextInputLayout menuAddDishType;

  @NonNull
  public final NestedScrollView nestedScrollView;

  @NonNull
  public final Button removeType;

  private ItemAddDishBinding(@NonNull ConstraintLayout rootView, @NonNull Button addDish,
      @NonNull MaterialCardView cardView3, @NonNull LinearLayout dishLinear,
      @NonNull TextView introText, @NonNull TextInputLayout menuAddDishType,
      @NonNull NestedScrollView nestedScrollView, @NonNull Button removeType) {
    this.rootView = rootView;
    this.addDish = addDish;
    this.cardView3 = cardView3;
    this.dishLinear = dishLinear;
    this.introText = introText;
    this.menuAddDishType = menuAddDishType;
    this.nestedScrollView = nestedScrollView;
    this.removeType = removeType;
  }

  @Override
  @NonNull
  public ConstraintLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static ItemAddDishBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static ItemAddDishBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.item_add_dish, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static ItemAddDishBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.add_dish;
      Button addDish = ViewBindings.findChildViewById(rootView, id);
      if (addDish == null) {
        break missingId;
      }

      id = R.id.cardView3;
      MaterialCardView cardView3 = ViewBindings.findChildViewById(rootView, id);
      if (cardView3 == null) {
        break missingId;
      }

      id = R.id.dishLinear;
      LinearLayout dishLinear = ViewBindings.findChildViewById(rootView, id);
      if (dishLinear == null) {
        break missingId;
      }

      id = R.id.introText;
      TextView introText = ViewBindings.findChildViewById(rootView, id);
      if (introText == null) {
        break missingId;
      }

      id = R.id.menu_add_dish_type;
      TextInputLayout menuAddDishType = ViewBindings.findChildViewById(rootView, id);
      if (menuAddDishType == null) {
        break missingId;
      }

      id = R.id.nestedScrollView;
      NestedScrollView nestedScrollView = ViewBindings.findChildViewById(rootView, id);
      if (nestedScrollView == null) {
        break missingId;
      }

      id = R.id.remove_type;
      Button removeType = ViewBindings.findChildViewById(rootView, id);
      if (removeType == null) {
        break missingId;
      }

      return new ItemAddDishBinding((ConstraintLayout) rootView, addDish, cardView3, dishLinear,
          introText, menuAddDishType, nestedScrollView, removeType);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
